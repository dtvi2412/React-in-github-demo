{"version":3,"sources":["ListItems.jsx","App.js","serviceWorker.js","index.js"],"names":["ListItems","renderItem","props","item","map","index","className","key","type","value","text","id","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","this","Component","library","add","faTrash","App","handleSubmit","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","newItems","deleteItems","filtetItems","filter","onSubmit","placeholder","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAIqBA,E,4MACnBC,WAAa,WAEX,OADiB,EAAKC,MAAdC,KACIC,KAAI,SAACD,EAAME,GACrB,OACE,yBAAKC,UAAU,OAAOC,IAAKF,GACzB,2BACE,2BACEG,KAAK,OACLC,MAAON,EAAKO,KACZC,GAAIR,EAAKI,IACTK,SAAU,SAACC,GACT,EAAKX,MAAMY,UAAUD,EAAEE,OAAON,MAAON,EAAKI,QAG9C,8BACG,IACD,kBAAC,IAAD,CACED,UAAU,UACVU,KAAK,QACLC,QAAS,WACP,EAAKf,MAAMgB,WAAWf,EAAKI,e,uDAUzC,OACE,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC7BC,KAAKpB,kB,GAjCyBqB,a,eCGvCC,IAAQC,IAAIC,K,IAuEGC,E,kDApEb,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IASRyB,aAAe,SAACd,GACd,EAAKe,SAAS,CACZC,YAAa,CACXnB,KAAMG,EAAEE,OAAON,MACfF,IAAKuB,KAAKC,UAdG,EAkBnBC,QAAU,SAACnB,GACTA,EAAEoB,iBACF,IAAMC,EAAU,EAAKC,MAAMN,YAC3B,GAAqB,KAAjBK,EAAQxB,KAAa,CACvB,IAAM0B,EAAQ,sBAAO,EAAKD,MAAMhC,MAAlB,CAAwB+B,IACtC,EAAKN,SAAS,CACZzB,KAAMiC,EACNP,YAAa,CACXnB,KAAM,GACNH,IAAK,QA3BM,EAgCnB8B,YAAc,SAAC9B,GACb,IAAM+B,EAAc,EAAKH,MAAMhC,KAAKoC,QAAO,SAACpC,GAAD,OAAUA,EAAKI,MAAQA,KAClE,EAAKqB,SAAS,CACZzB,KAAMmC,KAnCS,EAsCnBxB,UAAY,SAACJ,EAAMH,GACjB,IAAMJ,EAAO,EAAKgC,MAAMhC,KACxBA,EAAKC,KAAI,SAACD,GACJA,EAAKI,MAAQA,IACfJ,EAAKO,KAAOA,MAGhB,EAAKkB,SAAS,CACZzB,KAAMA,KA5CR,EAAKgC,MAAQ,CACXhC,KAAM,GACN0B,YAAa,CACXnB,KAAM,GACNH,IAAK,KANQ,E,qDAkDjB,OACE,yBAAKD,UAAU,OACb,gCACE,0BAAMK,GAAG,aAAa6B,SAAUnB,KAAKW,SACnC,2BAAOpB,SAAUS,KAAKM,aAAcc,YAAY,eAChD,4BAAQjC,KAAK,UAAb,SAGJ,kBAAC,EAAD,CACEM,UAAWO,KAAKP,UAChBI,WAAYG,KAAKgB,YACjBlC,KAAMkB,KAAKc,MAAMhC,Y,GA9DTuC,IAAMpB,WCGJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.67927759.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./ListItem.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport FlipMove from \"react-flip-move\";\r\nexport default class ListItems extends Component {\r\n  renderItem = () => {\r\n    const { item } = this.props;\r\n    return item.map((item, index) => {\r\n      return (\r\n        <div className=\"list\" key={index}>\r\n          <p>\r\n            <input\r\n              type=\"text\"\r\n              value={item.text}\r\n              id={item.key}\r\n              onChange={(e) => {\r\n                this.props.setUpdate(e.target.value, item.key);\r\n              }}\r\n            />\r\n            <span>\r\n              {\" \"}\r\n              <FontAwesomeIcon\r\n                className=\"faicons\"\r\n                icon=\"trash\"\r\n                onClick={() => {\r\n                  this.props.deleteItem(item.key);\r\n                }}\r\n              ></FontAwesomeIcon>\r\n            </span>\r\n          </p>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <FlipMove duration={300} easing=\"ease-in-out\">\r\n        {this.renderItem()}\r\n      </FlipMove>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ListItems from \"./ListItems\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\n\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faTrash);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      item: [],\n      currentItem: {\n        text: \"\",\n        key: \"\",\n      },\n    };\n  }\n  handleSubmit = (e) => {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now(),\n      },\n    });\n  };\n  addItem = (e) => {\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if (newItem.text !== \"\") {\n      const newItems = [...this.state.item, newItem];\n      this.setState({\n        item: newItems,\n        currentItem: {\n          text: \"\",\n          key: \"\",\n        },\n      });\n    }\n  };\n  deleteItems = (key) => {\n    const filtetItems = this.state.item.filter((item) => item.key !== key);\n    this.setState({\n      item: filtetItems,\n    });\n  };\n  setUpdate = (text, key) => {\n    const item = this.state.item;\n    item.map((item) => {\n      if (item.key === key) {\n        item.text = text;\n      }\n    });\n    this.setState({\n      item: item,\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\n            <input onChange={this.handleSubmit} placeholder=\"Enter text\" />\n            <button type=\"submit\">Add</button>\n          </form>\n        </header>\n        <ListItems\n          setUpdate={this.setUpdate}\n          deleteItem={this.deleteItems}\n          item={this.state.item}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}